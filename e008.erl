-module(e008).
-export([main/1, start/0]).

number() ->


slices(List, Size) ->
  lists:map(
    fun(E) ->
      lists:sublist(List, E, Size)
    end,
    lists:seq(1, length(List) - Size + 1)
  ).

digits(Number) ->
  digits(Number, []).

digits(0, L) ->
  L;
digits(Number, L) ->
  digits(Number div 10, [Number rem 10 | L]).

main(_) ->
  start().

start() ->
  Slices = slices(digits(number()), 5),
  Products = lists:map(
    fun(E) ->
      lists:foldl(
        fun(Elem, Acc) -> Elem * Acc end,
        1, E
      )
    end,
    Slices
  ),
  Max = lists:max(Products),
  io:format("~p~n", [Max]).

